function colors = distinguishablecolors(ncolors, bg, func)

% DISTINGUISHABLE_COLORS: pick colors that are maximally perceptually distinct
%
% When plotting a set of lines, you may want to distinguish them by color.
% By default, Matlab chooses a small set of colors and cycles among them,
% and so if you have more than a few lines there will be confusion about
% which line is which. To fix this problem, one would want to be able to
% pick a much larger set of distinct colors, where the number of colors
% equals or exceeds the number of lines you want to plot. Because our
% ability to distinguish among colors has limits, one should choose these
% colors to be "maximally perceptually distinguishable."
%
% This function generates a set of colors which are distinguishable
% by reference to the "Lab" color space, which more closely matches
% human color perception than RGB. Given an initial large list of possible
% colors, it iteratively chooses the entry in the list that is farthest (in
% Lab space) from all previously-chosen entries. While this "greedy"
% algorithm does not yield a global maximum, it is simple and efficient.
% Moreover, the sequence of colors is consistent no matter how many you
% request, which facilitates the users' ability to learn the color order
% and avoids major changes in the appearance of plots when adding or
% removing lines.
%
% Syntax:
%   colors = distinguishable_colors(n_colors)
% Specify the number of colors you want as a scalar, n_colors. This will
% generate an n_colors-by-3 matrix, each row representing an RGB
% color triple. If you don't precisely know how many you will need in
% advance, there is no harm (other than execution time) in specifying
% slightly more than you think you will need.
%
%   colors = distinguishable_colors(n_colors,bg)
% This syntax allows you to specify the background color, to make sure that
% your colors are also distinguishable from the background. Default value
% is white. bg may be specified as an RGB triple or as one of the standard
% "ColorSpec" strings. You can even specify multiple colors:
%     bg = {'w','k'}
% or
%     bg = [1 1 1; 0 0 0]
% will only produce colors that are distinguishable from both white and
% black.
%
%   colors = distinguishable_colors(n_colors,bg,rgb2labfunc)
% By default, distinguishable_colors uses the image processing toolbox's
% color conversion functions makecform and applycform. Alternatively, you
% can supply your own color conversion function.
%
% Example:
%   c = distinguishable_colors(25);
%   figure
%   image(reshape(c,[1 size(c)]))
%
% Example using the file exchange's 'colorspace':
%   func = @(x) colorspace('RGB->Lab',x);
%   c = distinguishable_colors(25,'w',func);

% Copyright 2010-2011 by Timothy E. Holy


% Parse the inputs
if nargin < 2
    bg = [1 1 1]; % Default white background
else
    if iscell(bg) % User specified a list of colors as a cell array
        bgc = bg;
        for i = 1:length(bgc)
            bgc{i} = parsecolor(bgc{i}); 
        end
        bg = cat(1, bgc{:});
    else % User specified a numeric array of colors (nx3)
        bg = parsecolor(bg);
    end
end

% Generate a sizable number of RGB triplets. This represents our space of
% possible color choices. By starting in RGB space, we ensure that all of
% the colors can be generated by the monitor.
ngrid = 30; % Number of grid divisions along each axis in RGB space
x = linspace(0, 1, ngrid);
[R, G, B] = ndgrid(x, x, x);
rgb = [R(:) G(:) B(:)];

if ncolors > (size(rgb,1)/3)
    error('Can not readily distinguish that many colors');
end

% Convert to lab color space, which more closely represents human
% perception (this was most likely part of the original MATLAB code)
if nargin > 2
    lab = func(rgb);
    bglab = func(bg);
else
    C = makecform('srgb2lab');
    lab = applycform(rgb, C);
    bglab = applycform(bg, C);
end

% If the user specified multiple background colors, compute distances from
% the candidate colors to the background colors.
mindist2 = inf(size(rgb, 1), 1);
for i = 1:size(bglab, 1) - 1
    dX = bsxfun(@minus, lab, bglab(i,:)); % Displacement of all colors from background
    dist2 = sum(dX.^2, 2); % Squared distance
    mindist2 = min(dist2, mindist2);
end

% Iteratively pick the color that maximizes the distance to the nearest
% color that has already been picked
colors = zeros(ncolors, 3);
lastlab = bglab(end,:); % Initialize by making the "previous" color equal to the background
for i = 1:ncolors
    dX = bsxfun(@minus, lab, lastlab); % Displacement of last color from all colors in list
    dist2 = sum(dX.^2, 2); % Squared distance
    mindist2 = min(dist2, mindist2);
    [~, index] = max(mindist2); % Find the entry farthest from all previously-chosen colors
    colors(i,:) = rgb(index,:); % Store output
    lastlab = lab(index,:); % Prepare for next iteration
end

end

    

    

