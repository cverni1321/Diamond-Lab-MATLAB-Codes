function [data, times, skipped] = AF_readfluorescence(textfile, nwells, varargin)

% Read the fluorescence data from a Microsoft Excel file generated by the
% FlexStation 3
%
% textfile - the name of the text file containing the fluorescence data
% nwells   - the number of wells in the plate (usually 384)
% dye      - the dye that was used (Fluo4 for single wavelength or Fura2
%            for dual wavelength
% data     - The fluoresence readings
%               dim 1: the row of the plate
%               dim 2: the column of the plate
%               dim 3: readings within the cell going down
%               dim 4: readings within the cell going across
%               dim 5: the next readings (going through time)
% times    - The time of the reading (same dimensions as the data reading)
% skipped  - (optional) The number of [rows cols] skipped from the top left of the plate

dye = 'Fluo4';

if nwells == 96
    totrows = 8;
    totcols = 12;
elseif nwells == 384
    totrows = 16;
    totcols = 24;
else
    error('Invalid number of wells - must be either 96 or 384')
end

% Start reading the data, displaying progress every 20 lines. First, must
% convert the text file to a format that is readable by Matlab (cell
% array).
fprintf('Reading %s ...\n', textfile);
textdata = text2cell(textfile, char(9), '', '', '', '', 20); % '9' is the ASCII value of 'tab'

if strcmp(dye,'Fluo4') % Find the number of rows of data and the last row
    endofdata = find(strcmpi(textdata(:,1), '~End'), 1) - 4; % The data starts at row 4 (see text file)
    startofdata = 4;
    rowsofrawdata = endofdata-startofdata+1;
    
    % Throw away the unnecessary rows before and after the data and the
    % first and second columns which don't contain any data (the second
    % column just shows temperature of machine)
    textdata = textdata(3:endofdata,:);
    textdata = textdata(:,3:end);
    
    % Find the number of wells that have been read (should be 384)
    numberofwells = size(textdata,2)/2; 
    
    % Pick out the data and put it in the appropriate place in the array
    data = nan(totrows, totcols, 1, 1, rowsofrawdata);
    times = data;
    for i = 1:numberofwells
        well = textdata(1,2*i); % Specify the current well
        [row, col] = well2rowcolumn(well);
        if isempty(textdata{2,(2*i)})
            data(row,col,1,1,:) = [NaN];
            times(row,col,1,1,:) = [NaN];
        else
            for j = 2:size(textdata,1)
                if strcmp(textdata{j,2*i},'#Sat')||strcmp(textdata{j,2*i},'Error')
                    % If the reading was saturated read it in as NaN or
                    % if you stop the run before it was scheduled to end the
                    % result is recorded as an error, read it in as NaN
                    data(row,col,1,1,j-1) = NaN;
                    times(row,col,1,1,j-1) = NaN;
                else
                    data(row,col,1,1,j-1) = textdata{j,2*i};
                    times(row,col,1,1,j-1) = textdata{j,2*i-1};
                end
            end
        end
    end
        
    skipped = [0 0]; % Skipped: ignore the number of rows and columns from top left
end

end
    
    

